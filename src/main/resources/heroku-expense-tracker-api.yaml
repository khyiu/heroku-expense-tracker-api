openapi: 3.0.3
info:
  title: Heroku Expense Tracker
  description: API for Heroku Expense Tracker, a hobby project to manage personal expenses
  version: 1.3.0
servers:
  - url: 'https://heroku-expense-tracker-back.herokuapp.com/'
    description: Production environment
tags:
  - name: Expenses
    description: Operations related to a set of expenses
  - name: Expense
    description: Operations related to a specific expense
  - name: Tags
    description: Operations related to the tags of the authenticated user
paths:
  /balance:
    get:
      tags:
        - Balance
      operationId: getBalance
      summary: Retrieve balance
      description: Retrieve the sum of the current user's expenses amount
      responses:
        200:
          description: Retrieval is successful
          content:
            application/json:
              schema:
                type: number
        401:
          description: User isn't authenticated

  /expenses:
    post:
      tags:
        - Expenses
      operationId: registerExpense
      summary: Register an expense.
      description: Registers an expense
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpenseRequest'
        required: true
      responses:
        201:
          description: Expense has been properly registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpenseResponse'
        400:
          description: Request does not comply with the data structure as defined in the API
    get:
      tags:
        - Expenses
      operationId: getExpenses
      summary: Retrieve expenses
      description: Retrieve expenses belonging to the current user, in a paginated way. This operation also supports filtering based on
        tag(s) and partial description
      parameters:
        - in: query
          name: pageSize
          schema:
            type: integer
            minimum: 1
          required: true
        - in: query
          name: pageNumber
          schema:
            type: integer
            minimum: 1
          required: true
        - in: query
          name: sortDirection
          schema:
            type: string
            enum:
              - ASC
              - DESC
          required: true
        - in: query
          name: sortBy
          schema:
            type: string
            enum:
              - DATE
              - AMOUNT
          required: true
        - in: query
          name: tagFilters
          schema:
            type: array
            items:
              type: string
        - in: query
          name: descriptionFilters
          schema:
            type: array
            items:
              type: string
        - in: query
          name: paidWithCreditCardFilter
          schema:
            type: boolean
        - in: query
          name: creditCardStatementIssuedFilter
          schema:
            type: boolean
        - in: query
          name: inclusiveDateLowerBound
          schema:
            type: string
            format: date
        - in: query
          name: inclusiveDateUpperBound
          schema:
            type: string
            format: date
        - in: query
          name: checked
          schema:
            type: boolean
        - in: query
          name: inclusiveAmountLowerBound
          schema:
            type: number
            example: 9.95
            minimum: -999999.99
            maximum: 999999.99
        - in: query
          name: inclusiveAmountUpperBound
          schema:
            type: number
            example: 9.95
            minimum: -999999.99
            maximum: 999999.99
      responses:
        200:
          description: Retrieval is successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpenseListResponse'
        401:
          description: User isn't authenticated
  /expenses/checked-status:
    patch:
      tags:
        - Expenses
      operationId: updateExpensesCheckedStatus
      summary: Update the checked/unchecked status of the specified expenses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpenseCheckedStatusRequest'
        required: true
      responses:
        200:
          description: The specified expenses have been updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExpenseResponse'
        400:
          description: The request is invalid because some of the specified expenses don't exist

  /expenses/import:
    post:
      tags:
        - Expenses
      operationId: importExpenses
      summary: Import expenses
      description: Upload file with expenses to import
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        200:
          description: Request to import expenses has been received
        400:
          description: Request does not comply with the data structure as defined in the API
        401:
          description: User isn't authenticated

  /expenses/back-up:
    get:
      tags:
        - Expenses
      operationId: exportExpenses
      summary: Export expenses
      description: Download current user's expenses as a CSV file
      responses:
        200:
          description: CSV file containing current user's expenses
          content:
            text/csv:
              schema:
                type: string
                format: binary
          headers:
            content-disposition:
              description: defines the default name under which the export file would be downloaded
              schema:
                type: string
        401:
          description: User isn't authenticated

  /expense/{id}:
    get:
      tags:
        - Expense
      operationId: getExpense
      summary: Retrieve an expense based on its identifier
      description: Fetch the expense that is identified by `id` and belongs to the current user
      parameters:
        - in: path
          name: id
          schema:
            type: string
            example: e0ba836f-5831-40bb-88a7-ca3e1ecf1526
          required: true
          description: Identifier of the expense to be retrieved
      responses:
        200:
          description: Retrieved expense
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpenseResponse'
        401:
          description: User isn't authenticated
        403:
          description: User is authenticated but isn't allowed to access the specified expensed
        404:
          description: The specified expense does not exist

    put:
      tags:
        - Expense
      operationId: updateExpense
      summary: Update an existing expense
      description: Update the expense that is identified by `id` and belongs to the current user
      parameters:
        - in: path
          name: id
          schema:
            type: string
            example: e0ba836f-5831-40bb-88a7-ca3e1ecf1526
          required: true
          description: Identifier of the expense to be updated
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpenseRequest'
        required: true
      responses:
        200:
          description: Expense has been properly updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpenseResponse'
        400:
          description: Request does not comply with the data structure as defined in the API
        401:
          description: User isn't authenticated
        403:
          description: User is authenticated but isn't allowed to access the specified expensed
        404:
          description: The expense identified by `id` does not exist
        409:
          description: The expense to be updated has already been updated by an other request. The current current needs to reload it

    delete:
      tags:
        - Expense
      operationId: deleteExpense
      summary: Delete an existing expense
      description: Delete the expense that is identified by `id`
      parameters:
        - in: path
          name: id
          schema:
            type: string
            example: e0ba836f-5831-40bb-88a7-ca3e1ecf1526
          required: true
          description: Identifier of the expense to be updated
      responses:
        200:
          description: Expense has been properly deleted
        400:
          description: Request does not comply with the data structure as defined in the API
        401:
          description: User isn't authenticated
        403:
          description: User is authenticated but isn't allowed to access the specified expensed
        404:
          description: The expense identified by `id` does not exist
        409:
          description: The expense to be updated has already been updated by an other request. The current current needs to reload it

  /tags:
    get:
      tags:
        - Tags
      operationId: getTags
      summary: Retrieve current authenticated user's tags
      description: Retrieve the tags that belong to the current user and that match
        the provided query, if there is any
      parameters:
        - in: query
          name: query
          schema:
            type: string
            minLength: 1
      responses:
        200:
          description: Retrieval is successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
        401:
          description: User isn't authenticated

components:
  schemas:
    ExpenseRequest:
      description: Request object representing an expense to be registered in the application
      type: object
      properties:
        date:
          type: string
          format: date
          example: '2021-08-25'
        amount:
          type: number
          example: 9.95
          minimum: -999999.99
          maximum: 999999.99
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
          minItems: 1
        description:
          type: string
          maxLength: 1024
        paidWithCreditCard:
          type: boolean
        creditCardStatementIssued:
          type: boolean
        version:
          type: integer
      required:
        - date
        - amount
        - tags

    Tag:
      description: Tag associated to an expense
      type: object
      properties:
        id:
          type: string
          format: uuid
        value:
          type: string
          minLength: 1
          maxLength: 50
      required:
        - value

    ExpenseResponse:
      description: Representation of an expense that has been persisted in the system.
      allOf:
        - $ref: '#/components/schemas/ExpenseRequest'
        - type: object
          properties:
            id:
              type: string
              format: uuid
            checked:
              type: boolean
          required:
            - id
            - checked

    ExpenseListResponse:
      description: Paginated response that is returned to the user upon retrieval of his expenses
      type: object
      properties:
        pageNumber:
          type: integer
        pageSize:
          type: integer
        totalNumberOfItems:
          type: integer
        items:
          type: array
          items:
            $ref: '#/components/schemas/ExpenseResponse'
      required:
        - pageNumber
        - pageSize
        - totalNumberOfItems
        - items

    ExpenseCheckedStatusRequest:
      type: object
      properties:
        expenseIds:
          type: array
          items:
            type: string
        checked:
          type: boolean
      required:
        - expenseIds
        - checked